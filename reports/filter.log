Traceback (most recent call last):
  File "/home/bitzer/SoftDev/Python/ScienceEnv/SE/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/bitzer/SoftDev/Python/ScienceEnv/SE/lib/python3.9/site-packages/nbclient/client.py", line 1117, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/bitzer/SoftDev/Python/ScienceEnv/SE/lib/python3.9/site-packages/nbclient/util.py", line 78, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/bitzer/SoftDev/Python/ScienceEnv/SE/lib/python3.9/site-packages/nbclient/util.py", line 57, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/home/bitzer/SoftDev/Python/ScienceEnv/SE/lib/python3.9/site-packages/nbclient/client.py", line 558, in async_execute
    await self.async_execute_cell(
  File "/home/bitzer/SoftDev/Python/ScienceEnv/SE/lib/python3.9/site-packages/nbclient/client.py", line 862, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/bitzer/SoftDev/Python/ScienceEnv/SE/lib/python3.9/site-packages/nbclient/client.py", line 765, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import matplotlib
import numpy
from scipy import signal
from matplotlib import pyplot
from matplotlib.widgets import Slider
from myst_nb import glue

matplotlib.style.use('sv.mplstyle')

def get_peak_EQ(f_0, gain_dB, Q, f_s):
    '''
    calculates filter coefficients of a peak equalizer
    with the given parameters
    
    Parameters:
    -----------
    f_0 : int
        peak frequency in Hz
    gain_dB : int
        dB gain at peak
    Q : float
        Quality of filter
    f_s : int
        sampling frequency
    '''
    K = numpy.tan(2*numpy.pi*f_0/(f_s*2))
    a = [0]*3
    b = [0]*3
    den = 1
    if (gain_dB > 0):
        V0 = 10**(gain_dB/20)
        den = (1 + K/Q + K*K)
        b[0] = (1 + V0*K/Q + K*K)
        b[1] = 2 * (K*K - 1)
        b[2] = (1 - V0*K/Q + K*K)
        a[0] = 1
        a[1] = 2 * (K*K - 1)
        a[2] = (1 - K/Q + K*K)
    else:
        V0 = 10**(-gain_dB/20)
        den = (1 + V0*K/Q + K*K)
        b[0] = (1 + K/Q + K*K)
        b[1] = 2 * (K*K - 1)
        b[2] = (1 - K/Q + K*K)
        a[0] = 1
        a[1] = 2 * (K*K - 1)
        a[2] = (1 - V0*K/Q + K*K)
    
    b /= den
    a[1:] /= den
    
    return b, a
    

gains = [12, 6, 0, -6, -12]
fs = 48000
freq= 8000
Q = 3

fig, (ax_gain, ax_freq, ax_Q) = pyplot.subplots(3, 1)

for gain in gains:
    b, a = get_peak_EQ(freq, gain, Q, fs) # get filter coeefficients        
    w, h = signal.freqz(b, a, fs) # calculate impulse response
    h_db = 20*numpy.log10(numpy.abs(h)) # dB
    ax_gain.plot(w, h_db)

ax_gain.set(ylim=[-13, 13], xlabel='Frequenz in Hz', ylabel='Verst√§rkung in dB',     
        title=f'Peak-EQ mit variablem Gain \n\
        bei Frequenz f = {f_c} Hz mit G√ºte Q = {Q:.1f}')

freqs = [0, fs/10, fs/5, fs/3]
gain = 12
for freq in freqs:
    b, a = get_peak_EQ(freq, gain, Q, fs) # get filter coeefficients
    w, h = signal.freqz(b, a, fs) # calculate impulse response
    h_db = 20*numpy.log10(numpy.abs(h)) # dB
    ax_freq.plot(w, h_db)
ax_freq.set(ylim=[-13, 13], xlabel='Frequenz in Hz', ylabel='Verst√§rkung in dB', 
        title=f'Peak-EQ mit variabler Frequenz \n\
        bei Gain = {gain} dB und G√ºte Q = {Q:.1f}')
Qs = [0, 1, 3, 10]
freq = 8000

for Q in Qs:
    b, a = get_peak_EQ(freq, gain, Q, fs) # get filter coeefficients
    w, h = signal.freqz(b, a, fs) # calculate impulse response
    h_db = 20*numpy.log10(numpy.abs(h)) # dB
    ax_Q.plot(w, h_db)
ax_Q.set(ylim=[-13, 13], xlabel='Frequenz in Hz', ylabel='Verst√§rkung in dB', 
         title=f'Peak-EQ mit variabler G√ºte \n\
         bei Frequenz f = {freq} Hz und Gain = {gain} dB')

pyplot.tight_layout()

glue("EQ_GainParam", fig, display=False)


------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m/tmp/ipykernel_17475/4157748866.py[0m in [0;36m<module>[0;34m[0m
[1;32m     68[0m ax_gain.set(ylim=[-13, 13], xlabel='Frequenz in Hz', ylabel='Verst√§rkung in dB',     
[1;32m     69[0m         [0mtitle[0m[0;34m=[0m[0mf[0m[0;31m'[0m[0mPeak[0m[0;34m-[0m[0mEQ[0m [0mmit[0m [0mvariablem[0m [0mGain[0m[0;31m [0m[0;31m\[0m[0mn[0m[0;31m\[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 70[0;31m         bei Frequenz f = {f_c} Hz mit G√ºte Q = {Q:.1f}')
[0m[1;32m     71[0m [0;34m[0m[0m
[1;32m     72[0m [0mfreqs[0m [0;34m=[0m [0;34m[[0m[0;36m0[0m[0;34m,[0m [0mfs[0m[0;34m/[0m[0;36m10[0m[0;34m,[0m [0mfs[0m[0;34m/[0m[0;36m5[0m[0;34m,[0m [0mfs[0m[0;34m/[0m[0;36m3[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m

[0;31mNameError[0m: name 'f_c' is not defined
NameError: name 'f_c' is not defined

